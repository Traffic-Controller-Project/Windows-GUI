# Form implementation generated from reading ui file 'GUIMain2.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import *
from PyQt6.QtCore import *
from PyQt6.QtWidgets import *

def is_convertible_to_int(string):
    try:
        int(string)
        return True
    except ValueError:
        return False

class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.n_slaves = 0
        self.received_message_slave = None
        self.received_message_master = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1046, 681)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")

        self.createTabs(self.tabWidget)

        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1046, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def createTabs(self,tabWidget):
        self.createSummaryTab(tabWidget)
        self.createSetMasterTab(tabWidget)

    def createSummaryTab(self,tabWidget):
        self.tabSummary = QtWidgets.QWidget()
        self.tabSummary.setObjectName("tabSummary")
        tabWidget.addTab(self.tabSummary, "Summary (View Only)")


    def createSetMasterTab(self,tabWidget):
        self.tabSetMaster = QtWidgets.QWidget()
        self.tabSetMaster.setObjectName("tabSetMaster")

        self.gridLayoutSetMaster = QtWidgets.QGridLayout(self.tabSetMaster)
        self.gridLayoutSetMaster.setObjectName("gridLayoutSetMaster")

        self.groupBoxSetMaster = QtWidgets.QGroupBox("Set Master State",self.tabSetMaster)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBoxSetMaster.sizePolicy().hasHeightForWidth())
        self.groupBoxSetMaster.setSizePolicy(sizePolicy)
        # self.groupBoxSetMaster.setMaximumSize(QtCore.QSize(1000, 565))
        self.groupBoxSetMaster.setObjectName("groupBoxSetMaster")
        self.gridLayoutGroupBoxSetMaster = QtWidgets.QGridLayout(self.groupBoxSetMaster)
        self.gridLayoutGroupBoxSetMaster.setObjectName("gridLayoutGroupBoxSetMaster")

        self.scrollArea = QtWidgets.QScrollArea(parent=self.groupBoxSetMaster)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())

        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        # self.scrollArea.setStyleSheet("QScrollArea {background-color:white}")
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0,0,800,800))
        self.scrollAreaWidgetContents.setSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding)
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.scrollAreaWidgetContents.setStyleSheet("QWidget {background-color:white}")

        self.vLayoutGroupBoxMaster = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.vLayoutGroupBoxMaster.setObjectName("vLayoutGroupBoxMaster")
        self.vLayoutGroupBoxMaster.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayoutGroupBoxSetMaster.addWidget(self.scrollArea, 1, 0, 1, 1)
        self.gridLayoutSetMaster.addWidget(self.groupBoxSetMaster, 0, 0, 1, 1)


        tabWidget.addTab(self.tabSetMaster, "Set Master State")

        self.makeSlotStructure(self.vLayoutGroupBoxMaster)
        
    def makeSlotStructure(self,vLayout):

        formLayoutSlavesNum = QFormLayout()
        hLayoutSlavesNum = QHBoxLayout()
        widgetSlavesNum = QWidget()
        labelSlavesNum = QLabel("Number of Slaves")
        lineEditSlavesNum = QLineEdit()
        lineEditSlavesNum.setMaximumSize(100,20)
        pushButtonSlavesNum = QPushButton("Set Slaves")
        pushButtonSlavesNum.clicked.connect(lambda checked,lineEdit=lineEditSlavesNum: self.show_slaves(lineEdit))
        hLayoutSlavesNum.addWidget(lineEditSlavesNum)
        hLayoutSlavesNum.addWidget(pushButtonSlavesNum)
        widgetSlavesNum.setLayout(hLayoutSlavesNum)
        hLayoutSlavesNum.addSpacerItem(QSpacerItem(200,20))
        formLayoutSlavesNum.addRow(labelSlavesNum,widgetSlavesNum)

        # hLayoutSlavesNum.setSpacing(200)
        formLayoutSlavesNum.setHorizontalSpacing(200)

        vLayout.addLayout(formLayoutSlavesNum)

        self.listDays = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
        # self.listDays = ["Sunday"]
        self.listSlotEachDay = [1,1,1,1,1,1,1]

        for i,day in enumerate(self.listDays):

            groupBoxDay = QGroupBox(day)
            vLayout.addWidget(groupBoxDay)
            groupBoxDay.setMinimumHeight(200)

            self.createSlotsForDay(groupBoxDay,i)

        pushButtonDeployButton = QPushButton("Deploy")
        pushButtonDeployButton.clicked.connect(self.deployToBroker)
        vLayout.addWidget(pushButtonDeployButton)
        vLayout.setAlignment(pushButtonDeployButton,Qt.AlignmentFlag.AlignHCenter)
        

    def createSlotsForDay(self,groupBoxDay,indexOfDay):

        # Create the FormLayout and add widgets to it
        formLayout = QFormLayout()

        # Create a QWidget to act as an intermediate container for scrolling
        container = QWidget()
        vLayoutDay = QVBoxLayout()
        vLayoutDay.addLayout(formLayout)
        container.setLayout(vLayoutDay)

        # Create a QScrollArea and set the intermediate container as its widget
        scrollAreaDay = QScrollArea()
        scrollAreaDay.setWidgetResizable(True)
        scrollAreaDay.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        scrollAreaDay.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        scrollAreaDay.setWidget(container)

        # Set the size policy of the QScrollArea to Expanding in both directions
        container.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        # container.setMinimumHeight(500)

        # Add the scroll area to the inner group box
        inner_group_box_layout = QVBoxLayout()
        inner_group_box_layout.addWidget(scrollAreaDay)
        groupBoxDay.setLayout(inner_group_box_layout)

        formLayout.setHorizontalSpacing(500)
        
        #SlotsNumber
        label = QLabel("Slots")
        hLayoutSlotsNumber = QHBoxLayout()
        widgetSlotsNumber = QWidget()
        widgetSlotsNumber.setLayout(hLayoutSlotsNumber)
        pushButtonPlus = QPushButton("+")
        pushButtonMinus = QPushButton("-")
        hLayoutSlotsNumber.addWidget(label)
        hLayoutSlotsNumber.addWidget(pushButtonPlus)
        hLayoutSlotsNumber.addWidget(pushButtonMinus)

        formLayout.addRow(label,widgetSlotsNumber)

        vLayoutSlotEach = QVBoxLayout()
        vLayoutDay.addLayout(vLayoutSlotEach)
        pushButtonPlus.clicked.connect(lambda checked, vLayoutSlotEach = vLayoutSlotEach,indexOfDay=indexOfDay: self.plusButtonSlot(vLayoutSlotEach,indexOfDay))
        pushButtonMinus.clicked.connect(lambda checked, vLayoutSlotEach = vLayoutSlotEach,indexOfDay=indexOfDay: self.minusButtonSlot(vLayoutSlotEach,indexOfDay))
        
        self.createEachSlot(vLayoutSlotEach,indexOfDay)

    def createEachSlot(self,vLayoutSlot,indexOfDay):
        formLayoutSlotEach = QFormLayout()
        vLayoutSlot.addLayout(formLayoutSlotEach)

        labelSlotNumber = QLabel("Slot "+str(self.listSlotEachDay[indexOfDay]))
        widgetSlotNumber = QWidget()
        formLayoutSlotEach.addRow(labelSlotNumber,widgetSlotNumber)

         #Start and End Times
        label = QLabel("Start Time")
        hLayoutTimeFields = QHBoxLayout()
        widgetTimeFields = QWidget()
        widgetTimeFields.setLayout(hLayoutTimeFields)
        lineEditHr = QLineEdit()
        labelHr = QLabel("hr")
        lineEditMin = QLineEdit()
        labelMin = QLabel("min")
        lineEditSec = QLineEdit()
        labelSec = QLabel("sec")
        hLayoutTimeFields.addWidget(lineEditHr)
        hLayoutTimeFields.addWidget(labelHr)
        hLayoutTimeFields.addWidget(lineEditMin)
        hLayoutTimeFields.addWidget(labelMin)
        hLayoutTimeFields.addWidget(lineEditSec)
        hLayoutTimeFields.addWidget(labelSec)
        formLayoutSlotEach.addRow(label,widgetTimeFields)
        
        label = QLabel("End Time")
        hLayoutTimeFields = QHBoxLayout()
        widgetTimeFields = QWidget()
        widgetTimeFields.setLayout(hLayoutTimeFields)
        lineEditHr = QLineEdit()
        labelHr = QLabel("hr")
        lineEditMin = QLineEdit()
        labelMin = QLabel("min")
        lineEditSec = QLineEdit()
        labelSec = QLabel("sec")
        hLayoutTimeFields.addWidget(lineEditHr)
        hLayoutTimeFields.addWidget(labelHr)
        hLayoutTimeFields.addWidget(lineEditMin)
        hLayoutTimeFields.addWidget(labelMin)
        hLayoutTimeFields.addWidget(lineEditSec)
        hLayoutTimeFields.addWidget(labelSec)
        formLayoutSlotEach.addRow(label,widgetTimeFields)

        labelMode = QLabel("Mode")
        pushButtonMode = QPushButton()
        pushButtonMode.setText("Select an option")
        menuMode = QMenu()
        pushButtonMode.setMenu(menuMode)
        pushButtonMode.setSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding,)
        formLayoutSlotEach.addRow(labelMode,pushButtonMode)
        labelParams = QLabel("Parameters:")
        widgetParams = QWidget()
        formLayoutSlotEach.addRow(labelParams,widgetParams)

        widgetParamsKey = QWidget()
        widgetParamsEmptyField = QWidget()
        formLayoutSlotEach.addRow(widgetParamsKey,widgetParamsEmptyField)
        formLayoutParams = QFormLayout()
        formLayoutParams.setHorizontalSpacing(100)
        widgetParamsKey.setLayout(formLayoutParams)

        labelPedestrian = QLabel("Pedestrian Check")
        checkBoxPedestrian = QCheckBox("On/Off")
        formLayoutSlotEach.addRow(labelPedestrian,checkBoxPedestrian)

        labelPedestrianTimer = QLabel("Pedestrian Timer")
        lineEditPedestrianTimer = QLineEdit()
        formLayoutSlotEach.addRow(labelPedestrianTimer,lineEditPedestrianTimer)

        labelRedExt = QLabel("Red Extension Check")
        checkBoxRedExt = QCheckBox("On/Off")
        formLayoutSlotEach.addRow(labelRedExt,checkBoxRedExt)

        labelRedExtTimer = QLabel("Red Extension Timer")
        lineEditRedExtTimer = QLineEdit()
        formLayoutSlotEach.addRow(labelRedExtTimer,lineEditRedExtTimer)

        widgetSlaveEnableKey = QWidget()
        widgetSlaveEnableEmptyField = QWidget()
        formLayoutSlotEach.addRow(widgetSlaveEnableKey,widgetSlaveEnableEmptyField)
        formLayoutSlaveEnable = QFormLayout()
        formLayoutSlaveEnable.setHorizontalSpacing(100)
        widgetSlaveEnableKey.setLayout(formLayoutSlaveEnable)

        for i in range(7):
            labelSlaveEnable = QLabel("Slave "+str(i+1))
            labelSlaveEnableField = QCheckBox("On/Off")
            formLayoutSlaveEnable.addRow(labelSlaveEnable,labelSlaveEnableField)

        options = ["Multidirectional","Straight-Only","Blinker"]

        for option in options:
            action = menuMode.addAction(option)
            action.triggered.connect(lambda checked, option=option, button=pushButtonMode, formLayoutParams = formLayoutParams: self.update_button_text(option, button, formLayoutParams,formLayoutSlaveEnable))

        formLayoutSlotEach.setHorizontalSpacing(500)

    def show_slaves(self,lineEdit):
        self.n_slaves = int(lineEdit.text()) if is_convertible_to_int(lineEdit.text()) else 0
        
        if(self.n_slaves > 7):
            self.n_slaves = 0
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slaves Exceeded!")
            popup.setText("Maximum Number of Slaves is 7!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()

        elif(self.n_slaves < 1):
            self.n_slaves = 0
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slaves too low!")
            popup.setText("Minimum Number of Slaves is 1!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()

        print(self.n_slaves)

    def plusButtonSlot(self,vLayoutSlotEach,indexOfDay):
        if(self.listSlotEachDay[indexOfDay]==32):
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slots per day exceeded!")
            popup.setText("Minimum Number of Slots per day is 32!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()
            return
        self.listSlotEachDay[indexOfDay]+=1
        self.createEachSlot(vLayoutSlotEach,indexOfDay)

    def minusButtonSlot(self,vLayoutSlotEach,indexOfDay):
        if(self.listSlotEachDay[indexOfDay]==1):
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slots per day too low!")
            popup.setText("Minimum Number of Slots per day is 1!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()
            return
        self.listSlotEachDay[indexOfDay]-=1
        layout = vLayoutSlotEach.takeAt(vLayoutSlotEach.count()-1)
        self.remove_all_widgets(layout)

    def update_button_text(self,option,button, formLayoutParams,formLayoutSlaveEnable):
        button.setText(option)
        self.remove_all_widgets(formLayoutParams)
        
        if(option == "Multidirectional"):
            for i in range(self.n_slaves):
                labelGreen = QLabel("Green "+str(i+1))
                labelGreenField = QLineEdit()
                labelAmber = QLabel("Amber "+str(i+1))
                labelAmberField = QLineEdit()
                formLayoutParams.addRow(labelGreen,labelGreenField)
                formLayoutParams.addRow(labelAmber,labelAmberField)
        elif(option == "Straight-Only"):
            for i in range(self.n_slaves//2):
                labelGreen = QLabel("Green "+str(i+1))
                labelGreenField = QLineEdit()
                labelAmber = QLabel("Amber "+str(i+1))
                labelAmberField = QLineEdit()
                formLayoutParams.addRow(labelGreen,labelGreenField)
                formLayoutParams.addRow(labelAmber,labelAmberField)
        elif(option == "Blinker"):
            labelFreq = QLabel("Frequency")
            labelFreqField = QLineEdit()
            formLayoutParams.addRow(labelFreq,labelFreqField)

        for i in range(7):
            itm = formLayoutSlaveEnable.itemAt(i,QFormLayout.ItemRole.FieldRole).widget()
            print(itm.text())
            itm.setChecked(False)
        for i in range(self.n_slaves):
            itm = formLayoutSlaveEnable.itemAt(i,QFormLayout.ItemRole.FieldRole).widget()
            itm.setChecked(True)

    def remove_all_widgets(self,layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget:
                    widget.deleteLater()
                layoutWithin = item.layout()
                if(layoutWithin):
                    self.remove_all_widgets(layoutWithin)
                del layoutWithin

    def scrapeMasterTab(self):
        self.dictScrapedTab = {}
        print()
        self.scrapeRecursively(self.vLayoutGroupBoxMaster)
        print(self.dictScrapedTab)

    def scrapeRecursively(self,itemScraped):
        if(type(itemScraped) == QVBoxLayout):
            self.scrapeVBoxLayoutItems(itemScraped)
        elif(type(itemScraped) == QHBoxLayout):
            self.scrapeHBoxLayoutItems(itemScraped)
        elif(type(itemScraped) == QFormLayout):
            self.scrapeHBoxLayoutItems(itemScraped)

    def scrapeVBoxLayoutItems(self,itemScraped):
        for i in range(itemScraped.count()):
            item = itemScraped.itemAt(i)
            if(type(item) == QWidgetItem):
                self.scrapeWidgetItems(item)
            elif(type(item) == QWidget):
                self.scrapeWidget(item)
            elif(type(item) == QFormLayout):
                self.scrapeFormLayoutItems(item)
            elif(type(item) == QVBoxLayout):
                self.scrapeVBoxLayoutItems(item)
            elif(type(item) == QHBoxLayout):
                self.scrapeHBoxLayoutItems(item)

    def scrapeHBoxLayoutItems(self,itemScraped):
        for i in range(itemScraped.count()):
            item = itemScraped.itemAt(i)
            if(type(item) == QWidgetItem):
                # self.scrapeWidgetItems(item)
                itemLayout = item.layout()
                itemWidget = item.widget()
                if(itemLayout):
                    if(type(itemLayout)==QFormLayout):
                        self.scrapeFormLayoutItems(itemLayout)
                    elif(type(itemLayout)==QVBoxLayout):
                        self.scrapeVBoxLayoutItems(itemLayout)
                    elif(type(itemLayout)==QHBoxLayout):
                        self.scrapeHBoxLayoutItems(itemLayout)
                if(itemWidget):
                    if(hasattr(itemWidget,"text")):
                        self.dictScrapedTab[itemWidget.text()]="New"
                    else:
                        print(itemWidget)
            elif(type(item) == QFormLayout):
                self.scrapeFormLayoutItems(item)
            elif(type(item) == QVBoxLayout):
                self.scrapeVBoxLayoutItems(item)
            elif(type(item) == QHBoxLayout):
                self.scrapeHBoxLayoutItems(item)
    
    def scrapeFormLayoutItems(self,item):
        for i in range(item.count()):
            itemLabel = item.itemAt(i,QFormLayout.ItemRole.LabelRole)
            itemField = item.itemAt(i,QFormLayout.ItemRole.FieldRole)
            if(itemLabel and itemField):
                label = self.scrapeWidgetItems(itemLabel)
                field = self.scrapeWidgetItems(itemField)
                self.dictScrapedTab[label]=field
            elif(itemLabel):
                label = self.scrapeWidgetItems(itemLabel)
                self.dictScrapedTab[label]="New"
            elif(itemField):
                field = self.scrapeWidgetItems(itemField)
                self.dictScrapedTab[field]="New"

    def scrapeWidgetItems(self,item):
        widget = item.widget()
        layout = item.layout()
        if(type(layout)==QFormLayout):
            self.scrapeFormLayoutItems(layout)
        elif(type(layout)==QVBoxLayout):
            self.scrapeVBoxLayoutItems(layout)
        elif(type(layout)==QHBoxLayout):
            self.scrapeHBoxLayoutItems(layout)

        if(widget):
            if(type(widget)==QScrollArea):
                self.scrapeScrollArea(widget)
            else:
                if(hasattr(widget,"text")):
                    return widget.text()
                layout = widget.layout()
                if(type(layout)==QFormLayout):
                    self.scrapeFormLayoutItems(layout)
                elif(type(layout)==QVBoxLayout):
                    self.scrapeVBoxLayoutItems(layout)
                elif(type(layout)==QHBoxLayout):
                    self.scrapeHBoxLayoutItems(layout)
        return ""
    
    def scrapeScrollArea(self,item):
        layout = item.widget().layout()
        if(type(layout)==QVBoxLayout):
            self.scrapeVBoxLayoutItems(layout)
        elif(type(layout)==QHBoxLayout):
            self.scrapeHBoxLayoutItems(layout)
        if(type(layout)==QFormLayout):
            self.scrapeFormLayoutItems(layout)
    
    def scrapeWidget(self,item):
        widget = item.widget()
        if(hasattr(widget,"text")):
            self.dictScrapedTab[widget.text()]="New"
        layout = widget.layout()
        if(type(layout)==QFormLayout):
            self.scrapeFormLayoutItems(layout)
        elif(type(layout)==QVBoxLayout):
            self.scrapeVBoxLayoutItems(layout)
        elif(type(layout)==QHBoxLayout):
            self.scrapeHBoxLayoutItems(layout)


    def deployToBroker(self):
        self.scrapeMasterTab()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("Traffic Controller", "Traffic Controller"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
