# Form implementation generated from reading ui file 'GUIMain2.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import *
from PyQt6.QtCore import *
from PyQt6.QtWidgets import *

import paho.mqtt.client as mqtt
from MQTTBroker import client,broker,port,topics

import json

treeModelsList = {}
dictSignalState = {"0":"Red","1":"Amber","2":"Green Left","3":"Green Forward","4":"Green Right"}
dictSignalIcon = {"Red":"icons/icon_red.png","Amber":"icons/icon_amber.png","Green Left":"icons/icon_greenLeft.png","Green Forward":"icons/icon_greenForward.png","Green Right":"icons/icon_greenRight.png"}
dictHigherState = {"0": "Multidirectional", "1": "Straight only"}
dictLowerState0 = {"0": "All Red, Pedestrian Green only", "1": "North Green","2": "West Green", "3": "South Green", "4": "East Green"}
dictLowerState1 = {"0": "All Red, Pedestrian Green only", "1": "North-South Green","2": "West-East Green"}
dictMasterKeys = {"n_states":'Higher State',"master_state":"Lower State","timers":"Timers for the slaves"}

def is_convertible_to_int(string):
    try:
        int(string)
        return True
    except ValueError:
        return False
    
# Read JSON file
def read_json_file(file_path):
    with open(file_path, 'r') as file:
        data = json.load(file)
    return data

class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.n_slaves = 0
        self.received_message_slave = None
        self.received_message_master = None
        self.received_message_slave_status = None
        self.received_message_slave_monitoring = None

    def on_message(self,client, userdata, msg):
        payload = msg.payload.decode("utf-8")
        try:
            # Try parsing the payload as JSON
            if(msg.topic == "/traffic/slave_feedback"):
                data = json.loads(payload)
                self.received_message_slave = data
                self.updateModel(treeModelsList["slave"],self.received_message_slave,"slave")
            elif(msg.topic == "/traffic/lamp_status"):
                data = json.loads(payload)
                self.received_message_slave_status = data
                self.updateModel(treeModelsList["Slave Lamp Status"],self.received_message_slave_status,"Slave Lamp Status")
            elif(msg.topic == "/traffic/monitoring"):
                data = json.loads(payload)
                self.received_message_slave_monitoring = data
                self.updateModel(treeModelsList["Slave Monitoring"],self.received_message_slave_monitoring,"Slave Monitoring")
            print(f'Received JSON message: {data}')
        except json.JSONDecodeError:
            print(f'Received non-JSON message: {payload}')
        except BaseException as be:
            print(be)
        print(self.received_message_slave)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1046, 681)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")

        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusLabel = QLabel()
        self.statusbar.addWidget(self.statusLabel)
        MainWindow.setStatusBar(self.statusbar)

        self.createTabs(self.tabWidget)

        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1046, 26))
        self.menubar.setObjectName("menubar")

        menuFile = self.menubar.addMenu("")
        menuFile.setTitle("File")
        actionLoad = menuFile.addAction("Load Configuration")
        actionSave= menuFile.addAction("Save Configuration")
        actionSave.triggered.connect(self.saveConfiguration)
        self.menubar.addMenu(menuFile)
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def createTabs(self,tabWidget):
        self.createSummaryTab(tabWidget)
        self.createSetMasterTab(tabWidget)
        self.createActivateSlavesTab(tabWidget)

    def createSummaryTab(self,tabWidget):
        self.tabSummary = QtWidgets.QWidget()
        self.tabSummary.setObjectName("tabSummary")
        tabWidget.addTab(self.tabSummary, "Summary (View Only)")
        verticalLayout = QtWidgets.QVBoxLayout()
        verticalLayout.setObjectName("verticalLayout")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tabSummary)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout_2.addLayout(verticalLayout, 0, 0)

        #Slave State Summary
        groupBox = QtWidgets.QGroupBox("Slave State Summary",self.tabSummary)
        groupBox.setObjectName("Slave State Summary")
        verticalLayout.addWidget(groupBox)

        treeModelSlave = QStandardItemModel()
        treeViewSlave = QTreeView(groupBox)
        treeViewSlave.setModel(treeModelSlave)
        layout = QVBoxLayout()
        layout.addWidget(treeViewSlave)
        groupBox.setLayout(layout)
        self.connectToMQTT()
        columns = ["Slave ID","State","Time remaining (s)"]
        treeModelSlave.setHorizontalHeaderLabels(columns)
        for i in range(len(columns)):
            treeViewSlave.setColumnWidth(i,int(self.centralwidget.parent().width()/len(columns)))

        treeModelsList["slave"]=treeModelSlave

        self.initialiseModel(treeModelSlave)

        #Slave State Monitoring
        groupBox = QtWidgets.QGroupBox("Slave Monitoring",self.tabSummary)
        groupBox.setObjectName("SlaveMonitoring")
        verticalLayout.addWidget(groupBox)

        treeModelSlaveMonitoring = QStandardItemModel()
        treeViewSlave = QTreeView(groupBox)
        # treeViewSlave.setAlternatingRowColors(True)
        treeViewSlave.setModel(treeModelSlaveMonitoring)
        layout = QVBoxLayout()
        layout.addWidget(treeViewSlave)
        groupBox.setLayout(layout)
        self.connectToMQTT()
        columns = ["Slave ID","Primary","Secondary","Overhead","Spare"]
        treeModelSlaveMonitoring.setHorizontalHeaderLabels(columns)
        for i in range(len(columns)):
            treeViewSlave.setColumnWidth(i,int(self.centralwidget.parent().width()/len(columns)))

        treeModelsList["Slave Monitoring"]=treeModelSlaveMonitoring

        self.initialiseModelMonitoring(treeModelSlaveMonitoring,"Healthy")

        #Slave Lamp Status
        groupBox = QtWidgets.QGroupBox("Slave Lamp Status",self.tabSummary)
        groupBox.setObjectName("SlaveLampStatus")
        verticalLayout.addWidget(groupBox)

        treeModelSlaveLampStatus = QStandardItemModel()
        treeViewSlave = QTreeView(groupBox)
        # treeViewSlave.setAlternatingRowColors(True)
        treeViewSlave.setModel(treeModelSlaveLampStatus)
        layout = QVBoxLayout()
        layout.addWidget(treeViewSlave)
        groupBox.setLayout(layout)
        self.connectToMQTT()
        columns = ["Slave ID","Primary","Secondary","Overhead","Spare"]
        treeModelSlaveLampStatus.setHorizontalHeaderLabels(columns)
        for i in range(len(columns)):
            treeViewSlave.setColumnWidth(i,int(self.centralwidget.parent().width()/len(columns)))

        treeModelsList["Slave Lamp Status"]=treeModelSlaveLampStatus

        self.initialiseModelMonitoring(treeModelSlaveLampStatus,"Off")

        pushButtonConnect = QPushButton()
        pushButtonConnect.setText("Connect to MQTT Broker")
        pushButtonConnect.clicked.connect(self.connectToMQTT)
        verticalLayout.addWidget(pushButtonConnect)
        verticalLayout.setAlignment(pushButtonConnect,Qt.AlignmentFlag.AlignHCenter)

    def initialiseModelMonitoring(self,treeModel,status=""):
        for i in range(7):
            itemSlaveID = QStandardItem(str(i+1))
            treeModel.setItem(i,0,itemSlaveID)

            # Primary
            self.setItemsMonitoring(itemSlaveID,1,[status]*5)
            # Secondary
            self.setItemsMonitoring(itemSlaveID,2,[status]*5)
            # Overhead
            self.setItemsMonitoring(itemSlaveID,3,[status]*5)
            # Spare
            self.setItemsMonitoring(itemSlaveID,4,[status]*5)
            

    def setItemsMonitoring(self,itemSlaveID,col,listStatus):
        # Red
        itemRedPrimary = None
        if(itemSlaveID.child(0,col) == None):
            itemRedPrimary = QStandardItem(listStatus[0])
            iconPath = self.dictSignal["red"][1]
            signalIcon = QtGui.QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            itemRedPrimary.setIcon(signalIcon)
            itemSlaveID.setChild(0,col,itemRedPrimary)
        else:
            itemRedPrimary = itemSlaveID.child(0,col)
            itemRedPrimary.setText(listStatus[0])

        # Amber
        itemAmberPrimary = None
        if(itemSlaveID.child(1,col) == None):
            itemAmberPrimary = QStandardItem(listStatus[1])
            iconPath = self.dictSignal["amber"][1]
            signalIcon = QtGui.QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            itemAmberPrimary.setIcon(signalIcon)
            itemSlaveID.setChild(1,col,itemAmberPrimary)
        else:
            itemAmberPrimary = itemSlaveID.child(1,col)
            itemAmberPrimary.setText(listStatus[1])

        # Green Forward
        itemGFwdPrimary = None
        if(itemSlaveID.child(2,col) == None):
            itemGFwdPrimary = QStandardItem(listStatus[2])
            iconPath = self.dictSignal["green_fwd"][1]
            signalIcon = QtGui.QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            itemGFwdPrimary.setIcon(signalIcon)
            itemSlaveID.setChild(2,col,itemGFwdPrimary)
        else:
            itemGFwdPrimary = itemSlaveID.child(2,col)
            itemGFwdPrimary.setText(listStatus[2])

        # Green Left
        itemGLftPrimary = None
        if(itemSlaveID.child(3,col) == None):
            itemGLftPrimary = QStandardItem(listStatus[3])
            iconPath = self.dictSignal["green_left"][1]
            signalIcon = QtGui.QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            itemGLftPrimary.setIcon(signalIcon)
            itemSlaveID.setChild(3,col,itemGLftPrimary)
        else:
            itemGLftPrimary = itemSlaveID.child(3,col)
            itemGLftPrimary.setText(listStatus[3])

        # Green Right
        itemGRgtPrimary = None
        if(itemSlaveID.child(4,col) == None):
            itemGRgtPrimary = QStandardItem(listStatus[4])
            iconPath = self.dictSignal["green_right"][1]
            signalIcon = QtGui.QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            itemGRgtPrimary.setIcon(signalIcon)
            itemSlaveID.setChild(4,col,itemGRgtPrimary)
        else:
            itemGRgtPrimary = itemSlaveID.child(4,col)
            itemGRgtPrimary.setText(listStatus[4])

    def initialiseModel(self,treeModel):
        self.dictSignal = {"off": ["Off","icons/icon_off.png"], "red": ["Red","icons/icon_red.png"], "amber": ["Amber","icons/icon_amber.png"], "green_fwd": ["Green Forward","icons/icon_greenForward.png"], "green_left": ["Green Left","icons/icon_greenLeft.png"], "green_right": ["Green Right","icons/icon_greenRight.png"]}
        for i in range(7):
            itemSlaveID = QStandardItem(str(i+1))
            itemSlaveState = QStandardItem("Off")
            itemSlaveTiming = QStandardItem("INF")
            iconPath = self.dictSignal["off"][1]
            signalIcon = QtGui.QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            treeModel.setItem(i,0,itemSlaveID)
            treeModel.setItem(i,1,itemSlaveState)
            itemSlaveState.setIcon(signalIcon)
            treeModel.setItem(i,2,itemSlaveTiming)

    def updateModel(self,treeModel,msg,model):
        # print("Slave ID: ",int(msg["slave_id"])-1)
        if(model=="slave"):
            slave_id = int(msg["slave_id"])-1
            iconPath = self.dictSignal[msg["state"]][1]
            signalIcon = QIcon()
            signalIcon.addPixmap(QtGui.QPixmap(iconPath), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            itemState = treeModel.item(slave_id,1)
            itemState.setIcon(signalIcon)
            itemState.setText(self.dictSignal[msg["state"]][0])
            itemTRemaining = treeModel.item(slave_id,2)
            itemTRemaining.setText(str(msg["t_remaining"]))
        elif(model=="Slave Lamp Status"):
            slave_id = int(msg["slave_id"])-1
            itemSlaveID = treeModel.item(slave_id,0)

            # Primary
            listStatus = []
            ind = 1
            for key in msg:
                if(key == "slave_id"):
                    continue
                listStatus = list(msg[key].values())
                for i,item in enumerate(listStatus):
                    listStatus[i]="Off" if (item == 0 or item == "0") else "On"
                self.setItemsMonitoring(itemSlaveID,ind,listStatus)
                listStatus.clear()
                ind += 1

        elif(model=="Slave Monitoring"):
            slave_id = int(msg["slave_id"])-1
            itemSlaveID = treeModel.item(slave_id,0)
            
            ind = 1
            for key in msg:
                if(key == "slave_id"):
                    continue
                listMonitoring = list(msg[key].values())
                for i,item in enumerate(listMonitoring):
                    if(item == 0 or item == "0"):
                        listMonitoring[i]="Healthy"
                    if(item == 1 or item == "1"):
                        listMonitoring[i]="Mismatch"
                    if(item == 2 or item == "2"):
                        listMonitoring[i]="Overcurrent"
                self.setItemsMonitoring(itemSlaveID,ind,listMonitoring)
                listMonitoring.clear()
                ind += 1

    def createSetMasterTab(self,tabWidget):
        self.tabSetMaster = QtWidgets.QWidget()
        self.tabSetMaster.setObjectName("tabSetMaster")

        self.gridLayoutSetMaster = QtWidgets.QGridLayout(self.tabSetMaster)
        self.gridLayoutSetMaster.setObjectName("gridLayoutSetMaster")

        self.groupBoxSetMaster = QtWidgets.QGroupBox("Set Master State",self.tabSetMaster)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBoxSetMaster.sizePolicy().hasHeightForWidth())
        self.groupBoxSetMaster.setSizePolicy(sizePolicy)
        # self.groupBoxSetMaster.setMaximumSize(QtCore.QSize(1000, 565))
        self.groupBoxSetMaster.setObjectName("groupBoxSetMaster")
        self.gridLayoutGroupBoxSetMaster = QtWidgets.QGridLayout(self.groupBoxSetMaster)
        self.gridLayoutGroupBoxSetMaster.setObjectName("gridLayoutGroupBoxSetMaster")

        self.scrollArea = QtWidgets.QScrollArea(parent=self.groupBoxSetMaster)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())

        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        # self.scrollArea.setStyleSheet("QScrollArea {background-color:white}")
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0,0,800,800))
        self.scrollAreaWidgetContents.setSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding)
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.scrollAreaWidgetContents.setStyleSheet("QWidget {background-color:white}")

        self.vLayoutGroupBoxMaster = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.vLayoutGroupBoxMaster.setObjectName("vLayoutGroupBoxMaster")
        self.vLayoutGroupBoxMaster.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayoutGroupBoxSetMaster.addWidget(self.scrollArea, 1, 0, 1, 1)
        self.gridLayoutSetMaster.addWidget(self.groupBoxSetMaster, 1, 0, 1, 1)

        tabWidget.addTab(self.tabSetMaster, "Set Master State")

        formLayoutSlavesNum = QFormLayout()
        hLayoutSlavesNum = QHBoxLayout()
        widgetSlavesNum = QWidget()
        labelSlavesNum = QLabel("Number of Slaves")
        lineEditSlavesNum = QLineEdit()
        lineEditSlavesNum.setMaximumSize(100,20)
        pushButtonSlavesNum = QPushButton("Set Slaves")
        pushButtonSlavesNum.clicked.connect(lambda checked,lineEdit=lineEditSlavesNum: self.show_slaves(lineEdit))
        hLayoutSlavesNum.addWidget(lineEditSlavesNum)
        hLayoutSlavesNum.addWidget(pushButtonSlavesNum)
        widgetSlavesNum.setLayout(hLayoutSlavesNum)
        hLayoutSlavesNum.addSpacerItem(QSpacerItem(200,20))
        formLayoutSlavesNum.addRow(labelSlavesNum,widgetSlavesNum)

        # hLayoutSlavesNum.setSpacing(200)
        formLayoutSlavesNum.setHorizontalSpacing(200)

        self.gridLayoutSetMaster.addLayout(formLayoutSlavesNum,0,0,1,1)

        pushButtonDeployButton = QPushButton("Deploy")
        pushButtonDeployButton.clicked.connect(self.deployToBroker)
        self.gridLayoutSetMaster.addWidget(pushButtonDeployButton,2,0,1,1)
        self.gridLayoutSetMaster.setAlignment(pushButtonDeployButton,Qt.AlignmentFlag.AlignHCenter)

        self.makeSlotStructure(self.vLayoutGroupBoxMaster)
        
    def makeSlotStructure(self,vLayout):

        self.listDays = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
        # self.listDays = ["Sunday"]
        self.listSlotEachDay = [1,1,1,1,1,1,1]

        for i,day in enumerate(self.listDays):

            groupBoxDay = QGroupBox(day)
            vLayout.addWidget(groupBoxDay)
            groupBoxDay.setMinimumHeight(200)

            self.createSlotsForDay(groupBoxDay,i)
        

    def createSlotsForDay(self,groupBoxDay,indexOfDay):

        # Create the FormLayout and add widgets to it
        formLayout = QFormLayout()

        # Create a QWidget to act as an intermediate container for scrolling
        container = QWidget()
        vLayoutDay = QVBoxLayout()
        vLayoutDay.addLayout(formLayout)
        container.setLayout(vLayoutDay)

        # Create a QScrollArea and set the intermediate container as its widget
        scrollAreaDay = QScrollArea()
        scrollAreaDay.setWidgetResizable(True)
        scrollAreaDay.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        scrollAreaDay.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        scrollAreaDay.setWidget(container)

        # Set the size policy of the QScrollArea to Expanding in both directions
        container.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        # container.setMinimumHeight(500)

        # Add the scroll area to the inner group box
        inner_group_box_layout = QVBoxLayout()
        inner_group_box_layout.addWidget(scrollAreaDay)
        groupBoxDay.setLayout(inner_group_box_layout)

        formLayout.setHorizontalSpacing(500)
        
        #SlotsNumber
        label = QLabel("Slots")
        hLayoutSlotsNumber = QHBoxLayout()
        widgetSlotsNumber = QWidget()
        widgetSlotsNumber.setLayout(hLayoutSlotsNumber)
        pushButtonPlus = QPushButton("+")
        pushButtonMinus = QPushButton("-")
        hLayoutSlotsNumber.addWidget(label)
        hLayoutSlotsNumber.addWidget(pushButtonPlus)
        hLayoutSlotsNumber.addWidget(pushButtonMinus)

        formLayout.addRow(label,widgetSlotsNumber)

        vLayoutSlotEach = QVBoxLayout()
        vLayoutDay.addLayout(vLayoutSlotEach)
        pushButtonPlus.clicked.connect(lambda checked, vLayoutSlotEach = vLayoutSlotEach,indexOfDay=indexOfDay: self.plusButtonSlot(vLayoutSlotEach,indexOfDay))
        pushButtonMinus.clicked.connect(lambda checked, vLayoutSlotEach = vLayoutSlotEach,indexOfDay=indexOfDay: self.minusButtonSlot(vLayoutSlotEach,indexOfDay))
        
        self.createEachSlot(vLayoutSlotEach,indexOfDay)

    def createEachSlot(self,vLayoutSlot,indexOfDay):
        formLayoutSlotEach = QFormLayout()
        vLayoutSlot.addLayout(formLayoutSlotEach)

        labelSlotNumber = QLabel("Slot "+str(self.listSlotEachDay[indexOfDay]))
        widgetSlotNumber = QWidget()
        formLayoutSlotEach.addRow(labelSlotNumber,widgetSlotNumber)

         #Start and End Times
        label = QLabel("Start Time")
        hLayoutTimeFields = QHBoxLayout()
        widgetTimeFields = QWidget()
        widgetTimeFields.setLayout(hLayoutTimeFields)
        lineEditHr = QLineEdit()
        labelHr = QLabel("hr")
        lineEditMin = QLineEdit()
        labelMin = QLabel("min")
        lineEditSec = QLineEdit()
        labelSec = QLabel("sec")
        hLayoutTimeFields.addWidget(lineEditHr)
        hLayoutTimeFields.addWidget(labelHr)
        hLayoutTimeFields.addWidget(lineEditMin)
        hLayoutTimeFields.addWidget(labelMin)
        hLayoutTimeFields.addWidget(lineEditSec)
        hLayoutTimeFields.addWidget(labelSec)
        formLayoutSlotEach.addRow(label,widgetTimeFields)
        
        label = QLabel("End Time")
        hLayoutTimeFields = QHBoxLayout()
        widgetTimeFields = QWidget()
        widgetTimeFields.setLayout(hLayoutTimeFields)
        lineEditHr = QLineEdit()
        labelHr = QLabel("hr")
        lineEditMin = QLineEdit()
        labelMin = QLabel("min")
        lineEditSec = QLineEdit()
        labelSec = QLabel("sec")
        hLayoutTimeFields.addWidget(lineEditHr)
        hLayoutTimeFields.addWidget(labelHr)
        hLayoutTimeFields.addWidget(lineEditMin)
        hLayoutTimeFields.addWidget(labelMin)
        hLayoutTimeFields.addWidget(lineEditSec)
        hLayoutTimeFields.addWidget(labelSec)
        formLayoutSlotEach.addRow(label,widgetTimeFields)

        labelMode = QLabel("Mode")
        pushButtonMode = QPushButton()
        pushButtonMode.setText("Select an option")
        menuMode = QMenu()
        pushButtonMode.setMenu(menuMode)
        pushButtonMode.setSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding,)
        formLayoutSlotEach.addRow(labelMode,pushButtonMode)

        labelParams = QLabel("Parameters:")
        widgetParams = QWidget()
        formLayoutSlotEach.addRow(labelParams,widgetParams)

        widgetParamsKey = QWidget()
        widgetParamsEmptyField = QWidget()
        formLayoutSlotEach.addRow(widgetParamsKey,widgetParamsEmptyField)
        formLayoutParams = QFormLayout()
        formLayoutParams.setHorizontalSpacing(100)
        widgetParamsKey.setLayout(formLayoutParams)

        labelPedestrian = QLabel("Pedestrian Check")
        checkBoxPedestrian = QCheckBox("On/Off")
        formLayoutSlotEach.addRow(labelPedestrian,checkBoxPedestrian)

        labelPedestrianTimer = QLabel("Pedestrian Timer")
        lineEditPedestrianTimer = QLineEdit()
        formLayoutSlotEach.addRow(labelPedestrianTimer,lineEditPedestrianTimer)

        labelRedExt = QLabel("Red Extension Check")
        checkBoxRedExt = QCheckBox("On/Off")
        formLayoutSlotEach.addRow(labelRedExt,checkBoxRedExt)

        labelRedExtTimer = QLabel("Red Extension Timer")
        lineEditRedExtTimer = QLineEdit()
        formLayoutSlotEach.addRow(labelRedExtTimer,lineEditRedExtTimer)

        widgetSlaveEnableKey = QWidget()
        widgetSlaveEnableEmptyField = QWidget()
        formLayoutSlotEach.addRow(widgetSlaveEnableKey,widgetSlaveEnableEmptyField)
        formLayoutSlaveEnable = QFormLayout()
        formLayoutSlaveEnable.setHorizontalSpacing(100)
        widgetSlaveEnableKey.setLayout(formLayoutSlaveEnable)

        for i in range(7):
            labelSlaveEnable = QLabel("Slave "+str(i+1))
            labelSlaveEnableField = QCheckBox("On/Off")
            formLayoutSlaveEnable.addRow(labelSlaveEnable,labelSlaveEnableField)

        self.options = ["Multidirectional","Straight-Only","Blinker"]

        for option in self.options:
            action = menuMode.addAction(option)
            action.triggered.connect(lambda checked, option=option, button=pushButtonMode, formLayoutParams = formLayoutParams: self.update_button_text(option, button, formLayoutParams,formLayoutSlaveEnable))

        formLayoutSlotEach.setHorizontalSpacing(500)

    def show_slaves(self,lineEdit):
        self.n_slaves = int(lineEdit.text()) if is_convertible_to_int(lineEdit.text()) else 0
        
        if(self.n_slaves > 7):
            self.n_slaves = 0
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slaves Exceeded!")
            popup.setText("Maximum Number of Slaves is 7!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()

        elif(self.n_slaves < 1):
            self.n_slaves = 0
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slaves too low!")
            popup.setText("Minimum Number of Slaves is 1!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()

        print(self.n_slaves)

    def plusButtonSlot(self,vLayoutSlotEach,indexOfDay):
        if(self.listSlotEachDay[indexOfDay]==32):
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slots per day exceeded!")
            popup.setText("Minimum Number of Slots per day is 32!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()
            return
        self.listSlotEachDay[indexOfDay]+=1
        self.createEachSlot(vLayoutSlotEach,indexOfDay)

    def minusButtonSlot(self,vLayoutSlotEach,indexOfDay):
        if(self.listSlotEachDay[indexOfDay]==1):
            popup = QMessageBox()
            popup.setWindowTitle("Number of Slots per day too low!")
            popup.setText("Minimum Number of Slots per day is 1!")
            popup.setIcon(QMessageBox.Icon.Information)
            popup.addButton(QMessageBox.StandardButton.Ok)
            popup.addButton(QMessageBox.StandardButton.Cancel)

            popup.exec()
            return
        self.listSlotEachDay[indexOfDay]-=1
        layout = vLayoutSlotEach.takeAt(vLayoutSlotEach.count()-1)
        self.remove_all_widgets(layout)

    def update_button_text(self,option,button, formLayoutParams,formLayoutSlaveEnable):
        button.setText(option)
        self.remove_all_widgets_form(formLayoutParams)
        
        if(option == "Multidirectional"):
            for i in range(self.n_slaves):
                labelGreen = QLabel("Green "+str(i+1))
                labelGreenField = QLineEdit()
                labelAmber = QLabel("Amber "+str(i+1))
                labelAmberField = QLineEdit()
                formLayoutParams.addRow(labelGreen,labelGreenField)
                formLayoutParams.addRow(labelAmber,labelAmberField)
        elif(option == "Straight-Only"):
            for i in range(self.n_slaves//2):
                labelGreen = QLabel("Green "+str(i+1))
                labelGreenField = QLineEdit()
                labelAmber = QLabel("Amber "+str(i+1))
                labelAmberField = QLineEdit()
                formLayoutParams.addRow(labelGreen,labelGreenField)
                formLayoutParams.addRow(labelAmber,labelAmberField)
        elif(option == "Blinker"):
            labelFreq = QLabel("Frequency")
            labelFreqField = QLineEdit()
            formLayoutParams.addRow(labelFreq,labelFreqField)

        for i in range(7):
            itm = formLayoutSlaveEnable.itemAt(i,QFormLayout.ItemRole.FieldRole).widget()
            print(itm.text())
            itm.setChecked(False)
        for i in range(self.n_slaves):
            itm = formLayoutSlaveEnable.itemAt(i,QFormLayout.ItemRole.FieldRole).widget()
            itm.setChecked(True)

    def createActivateSlavesTab(self,tabWidget):
        self.tabActivateSlaves = QtWidgets.QWidget()
        self.tabActivateSlaves.setObjectName("tabActivateSlaves")

        self.gridLayoutActivateSlave = QtWidgets.QGridLayout(self.tabActivateSlaves)
        self.gridLayoutActivateSlave.setObjectName("gridLayoutActivateSlave")

        self.groupBoxActivateSlave = QtWidgets.QGroupBox("Activate Slaves",self.tabActivateSlaves)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBoxActivateSlave.sizePolicy().hasHeightForWidth())
        self.groupBoxActivateSlave.setSizePolicy(sizePolicy)
        # self.groupBoxActivateSlave.setMaximumSize(QtCore.QSize(1000, 565))
        self.groupBoxActivateSlave.setObjectName("groupBoxActivateSlave")
        self.gridLayoutSlaveActivate = QtWidgets.QGridLayout(self.groupBoxActivateSlave)
        self.gridLayoutSlaveActivate.setObjectName("gridLayoutSlaveActivate")

        self.scrollAreaActivateSlave = QtWidgets.QScrollArea(parent=self.groupBoxActivateSlave)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollAreaActivateSlave.sizePolicy().hasHeightForWidth())

        self.scrollAreaActivateSlave.setSizePolicy(sizePolicy)
        self.scrollAreaActivateSlave.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollAreaActivateSlave.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollAreaActivateSlave.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.scrollAreaActivateSlave.setWidgetResizable(True)
        self.scrollAreaActivateSlave.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        # self.scrollAreaActivateSlave.setStyleSheet("QScrollArea {background-color:white}")
        self.scrollAreaActivateSlave.setObjectName("scrollAreaActivateSlave")

        self.scrollAreaActivateSlaveWidgetContents = QtWidgets.QWidget()
        self.scrollAreaActivateSlaveWidgetContents.setGeometry(QtCore.QRect(0,0,800,800))
        self.scrollAreaActivateSlaveWidgetContents.setSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding)
        self.scrollAreaActivateSlaveWidgetContents.setObjectName("scrollAreaActivateSlaveWidgetContents")
        # self.scrollAreaActivateSlaveWidgetContents.setStyleSheet("QWidget {background-color:white}")

        self.vLayoutActivateSlaves = QtWidgets.QVBoxLayout(self.scrollAreaActivateSlaveWidgetContents)
        self.vLayoutActivateSlaves.setObjectName("vLayoutActivateSlaves")
        self.vLayoutActivateSlaves.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.scrollAreaActivateSlave.setWidget(self.scrollAreaActivateSlaveWidgetContents)
        self.gridLayoutSlaveActivate.addWidget(self.scrollAreaActivateSlave, 1, 0, 1, 1)
        self.gridLayoutActivateSlave.addWidget(self.groupBoxActivateSlave, 1, 0, 1, 1)

        tabWidget.addTab(self.tabActivateSlaves, "Activate Slaves")

        formLayoutSlavesNum = QFormLayout()
        hLayoutSlavesNum = QHBoxLayout()
        widgetSlavesNum = QWidget()
        labelSlavesNum = QLabel("Number of Slaves")
        lineEditSlavesNum = QLineEdit()
        lineEditSlavesNum.setMaximumSize(100,20)
        pushButtonSlavesNum = QPushButton("Set Slaves")
        pushButtonSlavesNum.clicked.connect(lambda checked,lineEdit=lineEditSlavesNum: self.show_slaves(lineEdit))
        hLayoutSlavesNum.addWidget(lineEditSlavesNum)
        hLayoutSlavesNum.addWidget(pushButtonSlavesNum)
        widgetSlavesNum.setLayout(hLayoutSlavesNum)
        hLayoutSlavesNum.addSpacerItem(QSpacerItem(200,20))
        formLayoutSlavesNum.addRow(labelSlavesNum,widgetSlavesNum)

        # hLayoutSlavesNum.setSpacing(200)
        formLayoutSlavesNum.setHorizontalSpacing(200)

        self.gridLayoutActivateSlave.addLayout(formLayoutSlavesNum,0,0,1,1)

        pushButtonDeployButton = QPushButton("Deploy")
        pushButtonDeployButton.clicked.connect(self.deployToBrokerActivateSlave)
        self.gridLayoutActivateSlave.addWidget(pushButtonDeployButton,2,0,1,1)
        self.gridLayoutActivateSlave.setAlignment(pushButtonDeployButton,Qt.AlignmentFlag.AlignHCenter)

        self.addEachSlaveStructure(self.vLayoutActivateSlaves)

    def addEachSlaveStructure(self,vLayoutEachSlave):
        for i in range(7):
            groupBoxSlave = QGroupBox("Slave "+str(i+1))
            vLayoutEachSlave.addWidget(groupBoxSlave)
            self.createEachSlave(groupBoxSlave,i)
        pass
    
    def createEachSlave(self,groupBoxSlave,index):
        # Create the FormLayout and add widgets to it
        formLayout = QFormLayout()

        # Create a QWidget to act as an intermediate container for scrolling
        container = QWidget()
        vLayoutDay = QVBoxLayout()
        vLayoutDay.addLayout(formLayout)
        container.setLayout(vLayoutDay)

        # Create a QScrollArea and set the intermediate container as its widget
        scrollAreaDay = QScrollArea()
        scrollAreaDay.setWidgetResizable(True)
        scrollAreaDay.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        scrollAreaDay.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        scrollAreaDay.setWidget(container)

        # Set the size policy of the QScrollArea to Expanding in both directions
        container.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        container.setMinimumHeight(900)

        # Add the scroll area to the inner group box
        inner_group_box_layout = QVBoxLayout()
        inner_group_box_layout.addWidget(scrollAreaDay)
        groupBoxSlave.setLayout(inner_group_box_layout)

        formLayout.setHorizontalSpacing(500)
        
        #Each Slave
        self.createCheckBoxEach(formLayout)

    def createCheckBoxEach(self,formLayout):
        # Primary
        labelPrimary = QLabel("Primary")
        fieldPrimary = QWidget()
        formLayout.addRow(labelPrimary,fieldPrimary)
        self.createSlaveSignalFields(formLayout)
        

        # Secondary
        labelSecondary = QLabel("Secondary")
        fieldSecondary = QWidget()
        formLayout.addRow(labelSecondary,fieldSecondary)
        self.createSlaveSignalFields(formLayout)

        # Overhead
        labelOverhead = QLabel("Overhead")
        fieldOverhead = QWidget()
        formLayout.addRow(labelOverhead,fieldOverhead)
        self.createSlaveSignalFields(formLayout)

        # Spare
        labelSpare = QLabel("Spare")
        fieldSpare = QWidget()
        formLayout.addRow(labelSpare,fieldSpare)
        self.createSlaveSignalFields(formLayout)

    def createSlaveSignalFields(self,formLayout):
        label = QLabel("Red")
        checkBox = QCheckBox()
        checkBox.setText("Activate/Don't Activate")

        formLayout.addRow(label,checkBox)
        label = QLabel("Amber")
        checkBox = QCheckBox()
        checkBox.setText("Activate/Don't Activate")

        formLayout.addRow(label,checkBox)
        label = QLabel("Green Forward")
        checkBox = QCheckBox()
        checkBox.setText("Activate/Don't Activate")

        formLayout.addRow(label,checkBox)
        label = QLabel("Green Left")
        checkBox = QCheckBox()
        checkBox.setText("Activate/Don't Activate")

        formLayout.addRow(label,checkBox)
        label = QLabel("Green Right")
        checkBox = QCheckBox()
        checkBox.setText("Activate/Don't Activate")

        formLayout.addRow(label,checkBox)

    def scrapeSlaveTab(self):
        self.dictScrapedActivateSlave = {}
        for i in range(self.vLayoutActivateSlaves.count()):
            groupBoxSlave = self.vLayoutActivateSlaves.itemAt(i).widget()
            self.dictScrapedActivateSlave[i+1] = {}
            formLayout = groupBoxSlave.layout().itemAt(0).widget().widget().layout().itemAt(0).layout()

            labelOverall = ""
            for row in range(formLayout.rowCount()):
                itemLabel = formLayout.itemAt(row,QFormLayout.ItemRole.LabelRole).widget()
                itemField = formLayout.itemAt(row,QFormLayout.ItemRole.FieldRole).widget()
                
                if("PrimarySecondaryOverheadSpare".find(itemLabel.text()) != -1):
                    labelOverall = itemLabel.text()
                    labelOverall = labelOverall.lower()
                    self.dictScrapedActivateSlave[i+1][labelOverall] = {}
                    print(self.dictScrapedActivateSlave)
                else:
                    print(itemLabel.text())
                    print(labelOverall)
                    if(itemLabel.text().find("Green") != -1):
                        if(not "green" in self.dictScrapedActivateSlave[i+1][labelOverall]):
                            self.dictScrapedActivateSlave[i+1][labelOverall]["green"] = {}
                        itemLabelGreenParam = itemLabel.text()
                        if(itemLabelGreenParam.find("Forward") != -1):
                            itemLabelGreenParam = "fwd"
                        elif(itemLabelGreenParam.find("Left") != -1):
                            itemLabelGreenParam = "l"
                        elif(itemLabelGreenParam.find("Right") != -1):
                            itemLabelGreenParam = "r"
                        self.dictScrapedActivateSlave[i+1][labelOverall]["green"][itemLabelGreenParam]=int(itemField.isChecked())
                    else:
                        self.dictScrapedActivateSlave[i+1][labelOverall][itemLabel.text().lower()]=int(itemField.isChecked())

    def deployToBrokerActivateSlave(self):
        if(self.scrapeSlaveTab() == -1):
            return
        JSONScrapedTab = json.dumps(self.dictScrapedActivateSlave)
        print("JSON: ",JSONScrapedTab)

        if(client.is_connected() != True):
            try:
                rc = client.connect(broker,port,60)
                if(rc != 0):
                    self.statusLabel.setText("Could not connect!")
            except BaseException:
                self.statusLabel.setText("Could not connect!")
                client.disconnect()
        result = client.publish("/traffic/lamp_config",JSONScrapedTab)
        if(result.rc == mqtt.MQTT_ERR_SUCCESS):
            self.statusLabel.setText("Deployed!")
        else:
            self.statusLabel.setText("Could not deploy!")

    def remove_all_widgets_form(self,layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget:
                    widget.deleteLater()
                    del widget
                layoutWithin = item.layout()
                if(layoutWithin):
                    self.remove_all_widgets(layoutWithin)
                del layoutWithin
                layout.removeRow(0)

    def remove_all_widgets(self,layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget:
                    widget.deleteLater()
                    del widget
                layoutWithin = item.layout()
                if(layoutWithin):
                    self.remove_all_widgets(layoutWithin)
                del layoutWithin

    def scrapeMasterTab(self):
        self.dictScrapedTab = {}
        # print("Vertical Layout Count: ",self.vLayoutGroupBoxMaster.count())
        # self.scrapeRecursively(self.vLayoutGroupBoxMaster,self.dictScrapedTab)
        # Scraping through 7 days
        if(self.n_slaves == 0):
            windowTitle = "Invalid Data!"
            popupText = "Slaves not set!"
            self.callPopup(windowTitle,popupText)
            self.dictScrapedTab = {}
            return -1
        for i in range(0,7):    
            itemGroupBox = self.vLayoutGroupBoxMaster.itemAt(i).widget()
            itemGroupBoxTitle = self.listDays.index(itemGroupBox.title())
            self.dictScrapedTab[itemGroupBoxTitle]={}
            self.scrapeGroupBox(itemGroupBox,i,self.dictScrapedTab[itemGroupBoxTitle])
            # print('Type of Scroll Area vboxlayout second item: ',itemGroupBox.layout().itemAt(0).widget().widget().layout().itemAt(1))
        print(self.dictScrapedTab)
        print()
        return 1

    def scrapeGroupBox(self,groupBox,dayNumber,dictScrape):

        # groupBox.layout().itemAt(0).widget().widget().layout().itemAt(1) -> Gives VBoxLayout for each slot
        # groupBox.layout().itemAt(0).widget().widget().layout().itemAt(0) -> Gives FormLayout for "Slots"

        noOfSlots = groupBox.layout().itemAt(0).widget().widget().layout().itemAt(1).count()
        vBoxLayoutSlots = groupBox.layout().itemAt(0).widget().widget().layout().itemAt(1)
        for i in range(noOfSlots):
            slotNumber = int(vBoxLayoutSlots.itemAt(i).itemAt(0).widget().text().replace("Slot ",""))-1
            print("Slot Number: ",slotNumber)
            dictScrape[slotNumber]={}
            self.scrapeEachTimeSlot(vBoxLayoutSlots.itemAt(i),dictScrape[slotNumber])
            dictScrape[slotNumber]["env"]={}
            self.scrapeRestItems(vBoxLayoutSlots.itemAt(i),dayNumber,slotNumber,dictScrape[slotNumber]["env"])
        print()

    def scrapeRestItems(self,formLayout,dayNumber,slotNumber,dictScrape):
        #Mode item
        label = formLayout.itemAt(3,QFormLayout.ItemRole.LabelRole).widget().text()
        field = formLayout.itemAt(3,QFormLayout.ItemRole.FieldRole).widget().text()
        field = self.options.index(field) if field in self.options else -1

        # if(field == "Select an option"):
        #     windowTitle = "Invalid Data!"
        #     popupText = "Mode not set for "+slotNumber+" of "+self.listDays[dayNumber-1]+"!"
        #     self.callPopup(windowTitle,popupText)
        #     self.dictScrapedTab = {}
        #     return

        dictScrape["n"]=self.n_slaves
        dictScrape["mode"]=field

        #Parameters:
        dictScrape["params"]={}
        layoutParams = formLayout.itemAt(5,QFormLayout.ItemRole.LabelRole).widget().layout()
        # print("Count: ",layoutParams.count())
        for i in range(layoutParams.rowCount()):
            labelParams = layoutParams.itemAt(i,QFormLayout.ItemRole.LabelRole).widget().text()
            fieldParams = layoutParams.itemAt(i,QFormLayout.ItemRole.FieldRole).widget().text()
            # print("i: ",i)
            # print("label: ",labelParams)
            # print("field: ",fieldParams)
            # print()
            labelParams = labelParams.replace("Green ","g")
            labelParams = labelParams.replace("Amber ","a")
            labelParams = labelParams.replace("Frequency","f")
            dictScrape["params"][labelParams]=fieldParams

        #Pedestrian Check
        label = formLayout.itemAt(6,QFormLayout.ItemRole.LabelRole).widget().text()
        field = formLayout.itemAt(6,QFormLayout.ItemRole.FieldRole).widget().isChecked()
        # print("label: ",label)
        # print("field: ",field)
        dictScrape["pedestrian"]=0 if field == False else 1

        #Pedestrian Timer
        label = formLayout.itemAt(7,QFormLayout.ItemRole.LabelRole).widget().text()
        field = formLayout.itemAt(7,QFormLayout.ItemRole.FieldRole).widget().text()
        # print("label: ",label)
        # print("field: ",field)
        dictScrape["ped_timer"]=field

        #Red Ext Check
        label = formLayout.itemAt(8,QFormLayout.ItemRole.LabelRole).widget().text()
        field = formLayout.itemAt(8,QFormLayout.ItemRole.FieldRole).widget().isChecked()
        # print("label: ",label)
        # print("field: ",field)
        dictScrape["red_ext"]=0 if field == False else 1

        #Red Ext Timer
        label = formLayout.itemAt(9,QFormLayout.ItemRole.LabelRole).widget().text()
        field = formLayout.itemAt(9,QFormLayout.ItemRole.FieldRole).widget().text()
        # print("label: ",label)
        # print("field: ",field)
        dictScrape["r_ext_timer"]=field

        #Slave Enable Check
        layoutSlaveEnable = formLayout.itemAt(10,QFormLayout.ItemRole.LabelRole).widget().layout()
        dictScrape["slave_enables"]={}
        for i in range(layoutSlaveEnable.rowCount()):
            label = layoutSlaveEnable.itemAt(i,QFormLayout.ItemRole.LabelRole).widget().text()
            field = layoutSlaveEnable.itemAt(i,QFormLayout.ItemRole.FieldRole).widget().isChecked()
            print("label: ",label)
            print("field: ",field)
            label = int(label.replace("Slave ",""))-1
            dictScrape["slave_enables"][label]=0 if field == False else 1

    def scrapeEachTimeSlot(self,formLayout,dictScrape):
        label = formLayout.itemAt(1,QFormLayout.ItemRole.LabelRole)
        field = formLayout.itemAt(1,QFormLayout.ItemRole.FieldRole)
        self.scrapeTimeOfSlot("start",field.widget(),dictScrape)

        label = formLayout.itemAt(2,QFormLayout.ItemRole.LabelRole)
        field = formLayout.itemAt(2,QFormLayout.ItemRole.FieldRole)
        self.scrapeTimeOfSlot("end",field.widget(),dictScrape)

    def scrapeTimeOfSlot(self,label,field,dictScrape):
        # print(label.text())
        dictScrape[label]={}
        for i in range(0,field.layout().count(),2):
            itemText = field.layout().itemAt(i).widget().text()
            itemLabel = field.layout().itemAt(i+1).widget().text()
            dictScrape[label][itemLabel]=itemText

    def callPopup(self,windowTitle,popupText):
        popup = QMessageBox()
        popup.setWindowTitle(windowTitle)
        popup.setText(popupText)
        popup.setIcon(QMessageBox.Icon.Information)
        popup.addButton(QMessageBox.StandardButton.Ok)
        popup.addButton(QMessageBox.StandardButton.Cancel)

        popup.exec()
        return
    
    def serializeWidget(self, widget):
        widget_info = {
            "type": widget.metaObject().className(),
            "geometry": {
                "x": widget.geometry().x(),
                "y": widget.geometry().y(),
                "width": widget.geometry().width(),
                "height": widget.geometry().height()
            }
            # Add more properties as needed
        }

        if isinstance(widget, QLabel):
            widget_info["text"] = widget.text()

        if isinstance(widget, QScrollArea):
            if widget.widget():
                widget_info["content"] = self.serializeWidget(widget.widget())

        if isinstance(widget,QWidget):
            self.serializeLayout(widget.layout())

        return widget_info

    def serializeLayout(self, layout):
        if(layout):
            layout_info = []
            for i in range(layout.count()):
                item = layout.itemAt(i)
                if item.widget():
                    widget = item.widget()
                    widget_info = self.serializeWidget(widget)
                    layout_info.append(widget_info)
                elif item.layout():
                    sub_layout = item.layout()
                    sub_layout_info = self.serializeLayout(sub_layout)
                    layout_info.append(sub_layout_info)
            return layout_info
        return None
    
    # def serializeFormLayout(self,layout):
    #     if(layout):
    #         layout_info = []
    #         for i in range(layout.count()):
    #             itemLabel = layout.itemAt(i,QFormLayout.ItemRole.LabelRole)
    #             itemField = layout.itemAt(i,QFormLayout.ItemRole.FieldRole)
    #             if itemLabel.widget():
    #                 widget = itemLabel.widget()
    #                 widget_info = self.serializeWidget(widget)
    #                 layout_info.append(widget_info)
    #             elif itemLabel.layout():
    #                 sub_layout = itemLabel.layout()
    #                 sub_layout_info = self.serializeLayout(sub_layout)
    #                 layout_info.append(sub_layout_info)
    #             if itemField.widget():
    #                 widget = itemField.widget()
    #                 widget_info = self.serializeWidget(widget)
    #                 layout_info.append(widget_info)
    #             elif itemField.layout():
    #                 sub_layout = itemField.layout()
    #                 sub_layout_info = self.serializeLayout(sub_layout)
    #                 layout_info.append(sub_layout_info)
    #         return layout_info
    #     return None

    def saveConfiguration(self):
        # Create a configuration dictionary
        config = {
            "layout": self.serializeLayout(self.tabSetMaster.layout())
            # Add more configuration options as needed
        }

        # Serialize the configuration to a file
        with open("configuration.json", "w") as config_file:
            json.dump(config, config_file, indent=4)
        print("Configuration saved.")

    def deployToBroker(self):
        if(self.scrapeMasterTab() == -1):
            return
        JSONScrapedTab = json.dumps(self.dictScrapedTab)
        print("JSON: ",JSONScrapedTab)

        if(client.is_connected() != True):
            try:
                rc = client.connect(broker,port,60)
                if(rc != 0):
                    self.statusLabel.setText("Could not connect!")
            except BaseException:
                self.statusLabel.setText("Could not connect!")
                client.disconnect()
        result = client.publish("/traffic/slots",JSONScrapedTab)
        if(result.rc == mqtt.MQTT_ERR_SUCCESS):
            self.statusLabel.setText("Deployed!")
        else:
            self.statusLabel.setText("Could not deploy!")
    
    def connectToMQTT(self):
        # Call a method to update the status bar message
        if(client.is_connected() != True):
            try:
                rc = client.connect(broker,port,60)
                if(rc != 0):
                    self.statusLabel.setText("Could not connect!")
                else:
                    self.statusLabel.setText("Connected!")
                    for topic in topics:
                        client.subscribe(topic)
                    client.on_message = ui.on_message

            except BaseException:
                self.statusLabel.setText("Could not connect!")
                client.disconnect()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("Traffic Controller", "Traffic Controller"))
        MainWindow.setWindowIcon(QIcon("icons/icon_trafficWindow.png"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    try:
        print(client.connect(broker,port,60))
        for topic in topics:
            client.subscribe(topic)
        client.on_message = ui.on_message
    except KeyboardInterrupt:
        print("Disconnecting...")
        client.disconnect()
    finally:
        client.loop_start()
        sys.exit(app.exec())